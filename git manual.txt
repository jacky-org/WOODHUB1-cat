1、进入需管理的文件夹
2、右键，git bash here
3、git init
4、git status
5、git config --global user.name  "myname"
6、git config --global user.email "mye@qq.com"
7、git commit -m "v1"
8、修改文件
9、git add .
10、git commit -m "v2"                                  \\增添版本号
11、git log    或 git log --graph                                                 \\显示版本号
12、git reflog                                                 \\回显版本历史版本
13、git reset --hard kjkj;k;lkljlklklkl(版本号）     \\回滚至版本号
14、C:\Users\CXT\Downloads\null.png
15、git branch mybranch                                 \\查看/创建分支
16、git checkout master                                   \\切换主线
17、git checkout mybranch                               \\切换分支
18、git merge mybranch                                   \\合并分支，手动修改可能产生的冲突
19、git branch -d mybranch                               \\删除分支
20、工作流：稳定版本建在master上，另建dev分支用于开发新功能（稳定后合并入master),另                  建bug分支用于修改bug（修改完合并入master).
21、git remote add origin https://github.com/jacky7171/WOODHUB.git                               
                                                                         \\这里origin只是远程仓库的别名，可以是
                                                                              任意名字。
22、git push -u origin master                             \\第一次用-u指定默认路径，以后可直接
                                                                              用 git push 推送。
23、git config --global http.sslVerify false
24、测试中文版本号
25、git remote rm origin                                    \\删除远程连接的仓库名（待重建）
26、git remote add origin https://github.com/jacky7171/thishub.git
27、异地全拷贝，git clone https://github.com/jacky7171/thishub.git
28、异地更新，git pull origin dev                          \\dev:分支名，o"" rigin:远程仓库别名。
29、等同于git fetch origin dev,git merge origin/dev  
30、git rebase -i HEAD-3 , 然后把需合并的pick改成s ,然后再改提交记录的版本信息。注意不要合并那些已经push到仓库的记录。\\rebase:变基，从当前记录开始合并最近三条记录为一条。
31、git log --graph --pretty=format : "%h  %s"
32、git checkout dev\\git rebase master\\git checkout master\\git merge dev 
                                                                             \\将分支任务合并到主线
33、两端开发的程序，在其中一端pull时会产生分叉，若想避免分叉，可以用：git fetch origin dev        \\    git rebase origin\dev   来替换 pull语句。
34、git rebase 在合并过程中产生冲突，根据提示解决冲突后，还需加两句：git add .  \\ git rebase --continue
35、beyond compare 软件方便定位解决冲突
36、测试


